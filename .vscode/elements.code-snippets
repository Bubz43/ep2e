{
  "Inline HTML Template": {
    "scope": "typescript",
    "prefix": "html-",
    "body": ["html`", "\t$1", "`"]
  },
  "Inline CSS Template": {
    "scope": "typescript, typescriptreact",
    "prefix": "cc",
    "body": ["const $1 = css`", "\t$2", "`;"]
  },
  "LitElement Render": {
    "scope": "typescript",
    "prefix": "rend",
    "body": ["render() {", "\treturn html`", "\t\t$1", "\t`;", "}"]
  },
  "Custom Element": {
    "scope": "typescript",
    "prefix": "element",
    "body": [
      "import { customElement, LitElement, property, html } from \"lit-element\";",
      "import styles from \"./${TM_FILENAME_BASE}.scss\";",
      "",
      "@customElement(\"$1\")",
      "export class $2 extends LitElement {",
      "\tstatic get is() {",
      "\t\treturn \"$1\" as const;",
      "\t}",
      "",
      "\tstatic get styles() {",
      "\t\t return [styles];",
      "\t}",
      "",
      "\t$0",
      "}",
      "",
      "declare global {",
      "\tinterface HTMLElementTagNameMap {",
      "\t\t\"$1\": $2;",
      "\t}",
      "}",
      ""
    ]
  },
  "Custom Element CSS Base": {
    "scope": "scss",
    "prefix": "host",
    "body": [
      "@use \"scss/functions\" as *;",
      "@use \"scss/mixins\" as *;",
      "",
      "* {",
      "\tbox-sizing: border-box;",
      "}",
      "",
      ":host {",
      "\tdisplay: block;",
      "\t$0",
      "}"
    ]
  },
  "Emotion Inject Global ShadowDom": {
    "scope": "typescript",
    "prefix": "host",
    "body": [
      "injectGlobal`",
      "\t* {",
      "\t\tbox-sizing: border-box;",
      "\t}",
      "\t",
      "\t:host {",
      "\t\tdisplay: block;",
      "\t\t$0",
      "\t}",
      "`"
    ]
  },
  "Testing Template": {
    "scope": "typescript",
    "prefix": "tst",
    "body": ["describe($1, () => {", "\tconst { expect } = chai;", "\t$0", "})"]
  },
  "Extend Event": {
    "scope": "typescript",
    "prefix": "exe",
    "body": [
      "export class $1Event extends Event {",
      "\t static get is() {",
      "\t\treturn \"$2\" as const;",
      "\t}",
      "",
      "\t constructor($0) {",
      "\t\t super($1Event.is, { bubbles: true, composed: true });",
      "\t\t",
      "\t}",
      "}",
      "",
      "declare global {",
      "\tinterface HTMLElementEventMap {",
      "\t\t\"$2\": $1Event;",
      "\t}",
      "}"
    ]
  },
  "Svelte Component": {
    "scope": "svelte",
    "prefix": "svelte",
    "body": [
      "<script lang=\"ts\">\r",
      "\t$1",
      "</script>\r",
      "\r",
      "<style type=\"text/scss\">\r",
      "  @use \"scss/functions\" as *;\r",
      "  @use \"scss/mixins\" as *;\r",
      "",
      "\t ",
      "</style>\r",
      ""
    ],
    "description": "Create a svelte component with ts and scss"
  }
}
